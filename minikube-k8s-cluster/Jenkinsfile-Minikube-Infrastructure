pipeline {
    agent {
        label 'ec2-agent-1'  // Your Amazon Linux Jenkins agent
    }
    
    environment {
        // AWS and Terraform configuration
        AWS_CREDENTIALS_ID = 'aws-credentials'
        AWS_REGION = 'us-west-2'
        CLUSTER_NAME = 'minikube-demo'
        TERRAFORM_VERSION = '1.6.0'
        
        // Infrastructure action flags
        DEPLOY_CLUSTER = "${params.DEPLOY_CLUSTER ?: 'false'}"
        DESTROY_CLUSTER = "${params.DESTROY_CLUSTER ?: 'false'}"
        
        // Minikube specific configuration
        MINIKUBE_VERSION = "${params.MINIKUBE_VERSION ?: 'v1.32.0'}"
        KUBERNETES_VERSION = "${params.KUBERNETES_VERSION ?: 'v1.28.3'}"
        
        // Amazon Linux specific paths
        HOME = "/home/ec2-user"
        PATH = "/usr/local/bin:/usr/bin:/bin:$PATH"
    }
    
    parameters {
        booleanParam(
            name: 'DEPLOY_CLUSTER',
            defaultValue: false,
            description: 'Deploy new Minikube cluster on AWS EC2'
        )
        booleanParam(
            name: 'DESTROY_CLUSTER',
            defaultValue: false,
            description: 'Destroy existing Minikube cluster and infrastructure'
        )
        choice(
            name: 'INSTANCE_TYPE',
            choices: ['t3.medium', 't3.large', 't3.xlarge', 't2.medium', 't2.large', 'm5.large'],
            description: 'EC2 instance type (minimum t3.medium for Minikube)'
        )
        choice(
            name: 'AWS_REGION',
            choices: ['us-west-2', 'us-east-1', 'eu-west-1', 'ap-south-1'],
            description: 'AWS region for deployment'
        )
        string(
            name: 'MINIKUBE_VERSION',
            defaultValue: 'v1.32.0',
            description: 'Minikube version to install'
        )
        string(
            name: 'KUBERNETES_VERSION',
            defaultValue: 'v1.28.3',
            description: 'Kubernetes version for Minikube cluster'
        )
        choice(
            name: 'MINIKUBE_MEMORY',
            choices: ['3900', '4096', '6144', '8192'],
            description: 'Memory allocation for Minikube (MB)'
        )
        choice(
            name: 'MINIKUBE_CPUS',
            choices: ['2', '3', '4'],
            description: 'CPU allocation for Minikube'
        )
        string(
            name: 'CLUSTER_NAME',
            defaultValue: 'minikube-demo',
            description: 'Name for the Minikube cluster'
        )
        booleanParam(
            name: 'ENABLE_DASHBOARD',
            defaultValue: true,
            description: 'Enable Kubernetes Dashboard'
        )
        booleanParam(
            name: 'ENABLE_INGRESS',
            defaultValue: true,
            description: 'Enable Ingress Controller'
        )
        booleanParam(
            name: 'ENABLE_REGISTRY',
            defaultValue: true,
            description: 'Enable Local Registry'
        )
    }
    
    stages {
        stage('Agent Info') {
            steps {
                script {
                    echo "üñ•Ô∏è Agent Information:"
                    echo "==================="
                    sh '''
                        echo "Agent Node: ${NODE_NAME}"
                        echo "Workspace: ${WORKSPACE}"
                        echo "OS Info: $(cat /etc/os-release | grep PRETTY_NAME)"
                        echo "User: $(whoami)"
                        echo "Home: ${HOME}"
                        echo "Path: ${PATH}"
                        echo "Working Directory: $(pwd)"
                        echo "Available Space: $(df -h . | tail -1 | awk '{print $4}')"
                    '''
                }
            }
        }
        
        stage('Validation') {
            steps {
                script {
                    echo "üîç Validating pipeline parameters..."
                    
                    // Validate mutually exclusive actions
                    if (params.DEPLOY_CLUSTER && params.DESTROY_CLUSTER) {
                        error("‚ùå Cannot deploy and destroy cluster in the same run. Choose one action.")
                    }
                    
                    if (!params.DEPLOY_CLUSTER && !params.DESTROY_CLUSTER) {
                        error("‚ùå No action specified. Please select either DEPLOY_CLUSTER or DESTROY_CLUSTER.")
                    }
                    
                    // Validate instance type for Minikube
                    def validInstances = ['t3.medium', 't3.large', 't3.xlarge', 't2.medium', 't2.large', 'm5.large']
                    if (!validInstances.contains(params.INSTANCE_TYPE)) {
                        error("‚ùå Invalid instance type. Minikube requires at least t3.medium.")
                    }
                    
                    // Update environment variables from parameters
                    env.AWS_REGION = params.AWS_REGION
                    env.CLUSTER_NAME = params.CLUSTER_NAME
                    env.MINIKUBE_VERSION = params.MINIKUBE_VERSION
                    env.KUBERNETES_VERSION = params.KUBERNETES_VERSION
                    
                    echo "‚úÖ Validation completed"
                    echo "üìã Configuration:"
                    echo "   - Action: ${params.DEPLOY_CLUSTER ? 'DEPLOY' : 'DESTROY'}"
                    echo "   - Cluster Name: ${params.CLUSTER_NAME}"
                    echo "   - Region: ${params.AWS_REGION}"
                    echo "   - Instance Type: ${params.INSTANCE_TYPE}"
                    echo "   - Minikube Version: ${params.MINIKUBE_VERSION}"
                    echo "   - Kubernetes Version: ${params.KUBERNETES_VERSION}"
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo 'üì• Checking out source code...'
                checkout scm
            }
        }
        
        stage('Verify Dependencies') {
            steps {
                echo 'üîß Verifying required tools on Amazon Linux agent...'
                sh '''
                    echo "Checking installed tools..."
                    
                    # Check Terraform
                    if command -v terraform &> /dev/null; then
                        echo "‚úÖ Terraform: $(terraform version | head -1)"
                    else
                        echo "‚ùå Terraform not found!"
                        echo "Installing Terraform..."
                        cd /tmp
                        wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                        unzip -o terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                        sudo mv terraform /usr/local/bin/
                        rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                        echo "‚úÖ Terraform installed: $(terraform version | head -1)"
                    fi
                    
                    # Check AWS CLI
                    if command -v aws &> /dev/null; then
                        echo "‚úÖ AWS CLI: $(aws --version)"
                    else
                        echo "‚ùå AWS CLI not found!"
                        echo "Installing AWS CLI..."
                        cd /tmp
                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        unzip -o awscliv2.zip
                        sudo ./aws/install --update
                        rm -rf aws awscliv2.zip
                        echo "‚úÖ AWS CLI installed: $(aws --version)"
                    fi
                    
                    # Check kubectl
                    if command -v kubectl &> /dev/null; then
                        echo "‚úÖ kubectl: $(kubectl version --client --short 2>/dev/null || echo 'kubectl installed')"
                    else
                        echo "‚ùå kubectl not found!"
                        echo "Installing kubectl..."
                        cd /tmp
                        curl -LO "https://dl.k8s.io/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        sudo mv kubectl /usr/local/bin/
                        echo "‚úÖ kubectl installed: $(kubectl version --client --short 2>/dev/null || echo 'kubectl installed')"
                    fi
                    
                    # Check other tools
                    echo "‚úÖ Git: $(git --version)"
                    echo "‚úÖ Curl: $(curl --version | head -1)"
                    echo "‚úÖ Unzip: $(unzip -v | head -1 | awk '{print $2}')"
                    echo "‚úÖ JQ: $(jq --version)"
                    
                    echo ""
                    echo "üéØ All required tools are available!"
                '''
            }
        }
        
        stage('Prepare Infrastructure') {
            when {
                anyOf {
                    expression { params.DEPLOY_CLUSTER == true }
                    expression { params.DESTROY_CLUSTER == true }
                }
            }
            steps {
                echo 'üèóÔ∏è Preparing infrastructure configuration...'
                dir('minikube-terraform') {
                    sh '''
                        # Generate SSH key pair if not exists
                        if [ ! -f ${HOME}/.ssh/id_rsa ]; then
                            echo "Generating SSH key pair..."
                            ssh-keygen -t rsa -b 4096 -f ${HOME}/.ssh/id_rsa -N ""
                        fi
                        
                        # Create terraform.tfvars from parameters
                        cat <<EOF > terraform.tfvars
aws_region = "${AWS_REGION}"
cluster_name = "${CLUSTER_NAME}"
environment = "demo"
instance_type = "${INSTANCE_TYPE}"
public_key = "$(cat ${HOME}/.ssh/id_rsa.pub)"
allowed_cidr_blocks = ["0.0.0.0/0"]
use_elastic_ip = true
minikube_version = "${MINIKUBE_VERSION}"
kubernetes_version = "${KUBERNETES_VERSION}"
minikube_driver = "docker"
minikube_memory = "${MINIKUBE_MEMORY}"
minikube_cpus = "${MINIKUBE_CPUS}"
enable_addons = [
EOF
                        
                        # Add enabled addons based on parameters
                        if [ "${ENABLE_DASHBOARD}" = "true" ]; then
                            echo '  "dashboard",' >> terraform.tfvars
                        fi
                        if [ "${ENABLE_INGRESS}" = "true" ]; then
                            echo '  "ingress",' >> terraform.tfvars
                        fi
                        if [ "${ENABLE_REGISTRY}" = "true" ]; then
                            echo '  "registry",' >> terraform.tfvars
                        fi
                        echo '  "metrics-server"' >> terraform.tfvars
                        echo ']' >> terraform.tfvars
                        
                        echo "‚úÖ Terraform configuration prepared"
                        echo "üìÑ terraform.tfvars content:"
                        cat terraform.tfvars
                    '''
                }
            }
        }
        
        stage('Deploy Minikube Cluster') {
            when {
                expression { params.DEPLOY_CLUSTER == true }
            }
            steps {
                echo 'üöÄ Deploying Minikube cluster...'
                withCredentials([
                    [
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: AWS_CREDENTIALS_ID,
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]
                ]) {
                    dir('minikube-terraform') {
                        sh '''
                            echo "üîÑ Initializing Terraform..."
                            terraform init
                            
                            echo "üìã Planning deployment..."
                            terraform plan -out=tfplan
                            
                            echo "üöÄ Applying deployment..."
                            terraform apply -auto-approve tfplan
                            
                            echo "üíæ Saving outputs..."
                            terraform output -json > terraform-outputs.json
                            
                            echo "‚úÖ Infrastructure deployment completed!"
                            echo ""
                            echo "üìä Deployment Summary:"
                            echo "===================="
                            echo "Instance ID: $(terraform output -raw instance_id)"
                            echo "Public IP: $(terraform output -raw instance_public_ip)"
                            echo "SSH Command: $(terraform output -raw ssh_command)"
                            echo "Minikube Status: $(terraform output -raw minikube_status_command)"
                        '''
                    }
                }
            }
        }
        
        stage('Wait for Cluster Readiness') {
            when {
                expression { params.DEPLOY_CLUSTER == true }
            }
            steps {
                echo '‚è≥ Waiting for Minikube cluster to be ready...'
                withCredentials([
                    [
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: AWS_CREDENTIALS_ID,
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]
                ]) {
                    dir('minikube-terraform') {
                        sh '''
                            # Get instance IP
                            INSTANCE_IP=$(terraform output -raw instance_public_ip)
                            echo "üîç Checking instance readiness: $INSTANCE_IP"
                            
                            # Wait for SSH to be available
                            echo "‚è≥ Waiting for SSH connection..."
                            timeout 300 bash -c "until nc -z $INSTANCE_IP 22; do sleep 10; echo 'Still waiting for SSH...'; done"
                            echo "‚úÖ SSH is available"
                            
                            # Wait for Minikube setup to complete
                            echo "‚è≥ Waiting for Minikube setup to complete..."
                            timeout 900 bash -c "
                                while true; do
                                    if ssh -i ${HOME}/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$INSTANCE_IP 'minikube status' 2>/dev/null | grep -q 'Running'; then
                                        echo '‚úÖ Minikube is running'
                                        break
                                    fi
                                    echo 'Still waiting for Minikube...'
                                    sleep 30
                                done
                            "
                            
                            # Verify cluster is working
                            echo "üîç Verifying cluster functionality..."
                            ssh -i ${HOME}/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "
                                echo '=== Cluster Status ==='
                                minikube status
                                echo ''
                                echo '=== Nodes ==='
                                kubectl get nodes -o wide
                                echo ''
                                echo '=== System Pods ==='
                                kubectl get pods -n kube-system
                                echo ''
                                echo '=== Enabled Addons ==='
                                minikube addons list | grep enabled
                            "
                            
                            echo "üéâ Minikube cluster is ready!"
                        '''
                    }
                }
            }
        }
        
        stage('Configure Jenkins Access') {
            when {
                expression { params.DEPLOY_CLUSTER == true }
            }
            steps {
                echo 'üîß Configuring Jenkins access to cluster...'
                dir('minikube-terraform') {
                    sh '''
                        # Get instance IP
                        INSTANCE_IP=$(terraform output -raw instance_public_ip)
                        
                        # Download kubeconfig from instance
                        echo "üì• Downloading kubeconfig from instance..."
                        ssh -i ${HOME}/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "
                            # Ensure jenkins kubeconfig exists
                            if [ ! -f jenkins-kubeconfig.yaml ]; then
                                echo 'Creating Jenkins kubeconfig...'
                                cat ~/.kube/config > jenkins-kubeconfig.yaml
                            fi
                            cat jenkins-kubeconfig.yaml
                        " > jenkins-kubeconfig.yaml
                        
                        echo "‚úÖ Kubeconfig downloaded"
                        echo "üìä Kubeconfig size: $(wc -l < jenkins-kubeconfig.yaml) lines"
                        
                        # Store cluster information
                        cat <<EOF > cluster-access-info.txt
Minikube Cluster Access Information
==================================

Cluster Name: ${CLUSTER_NAME}
Public IP: $INSTANCE_IP
SSH Command: $(terraform output -raw ssh_command)

Kubeconfig Location: jenkins-kubeconfig.yaml
Dashboard Command: minikube dashboard --url

To access cluster:
1. Upload jenkins-kubeconfig.yaml to Jenkins credentials
2. SSH to instance for direct access
3. Use kubectl with the provided config

Setup completed at: $(date)
EOF
                        
                        echo "üìÑ Cluster access information saved"
                    '''
                }
            }
        }
        
        stage('Cluster Health Check') {
            when {
                expression { params.DEPLOY_CLUSTER == true }
            }
            steps {
                echo 'üè• Performing cluster health check...'
                dir('minikube-terraform') {
                    sh '''
                        # Get instance IP
                        INSTANCE_IP=$(terraform output -raw instance_public_ip)
                        
                        # Run comprehensive health check
                        ssh -i ${HOME}/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "
                            echo 'üè• Comprehensive Cluster Health Check'
                            echo '====================================='
                            echo ''
                            
                            echo 'üìä Minikube Status:'
                            minikube status
                            echo ''
                            
                            echo 'üñ•Ô∏è Node Information:'
                            kubectl get nodes -o wide
                            echo ''
                            
                            echo 'üì¶ System Pods Status:'
                            kubectl get pods -n kube-system --no-headers | awk '{print \$1, \$3}' | column -t
                            echo ''
                            
                            echo 'üîß Enabled Addons:'
                            minikube addons list | grep enabled
                            echo ''
                            
                            echo 'üåê Services:'
                            kubectl get svc --all-namespaces
                            echo ''
                            
                            echo 'üíæ Storage Classes:'
                            kubectl get storageclass
                            echo ''
                            
                            echo 'üîí RBAC Check:'
                            kubectl get clusterrolebinding jenkins-deployer || echo 'Jenkins RBAC not found'
                            echo ''
                            
                            echo 'üéØ Test Pod Deployment:'
                            kubectl run test-nginx --image=nginx:latest --port=80 --dry-run=client -o yaml | kubectl apply -f -
                            sleep 5
                            kubectl get pod test-nginx
                            kubectl delete pod test-nginx --force --grace-period=0
                            echo ''
                            
                            echo '‚úÖ Health check completed successfully!'
                        "
                    '''
                }
            }
        }
        
        stage('Destroy Cluster') {
            when {
                expression { params.DESTROY_CLUSTER == true }
            }
            steps {
                echo 'üî• Destroying Minikube cluster and infrastructure...'
                withCredentials([
                    [
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: AWS_CREDENTIALS_ID,
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]
                ]) {
                    dir('minikube-terraform') {
                        sh '''
                            echo "üîÑ Initializing Terraform..."
                            terraform init
                            
                            echo "üìã Planning destruction..."
                            terraform plan -destroy
                            
                            echo "üî• Destroying infrastructure..."
                            terraform destroy -auto-approve
                            
                            echo "üßπ Cleaning up files..."
                            rm -f terraform.tfvars tfplan terraform-outputs.json jenkins-kubeconfig.yaml cluster-access-info.txt
                            
                            echo "‚úÖ Infrastructure destroyed successfully!"
                            echo "üí∞ All AWS resources have been cleaned up"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            sh '''
                # Clean up any temporary files
                rm -f minikube-terraform/temp-* || true
                
                # Don't remove the tools as they're installed system-wide on the agent
                echo "Tools preserved on agent for future builds"
            '''
        }
        
        success {
            script {
                if (params.DEPLOY_CLUSTER) {
                    def clusterInfo = ""
                    try {
                        dir('minikube-terraform') {
                            def outputs = readJSON file: 'terraform-outputs.json'
                            clusterInfo = """
üéâ Minikube Cluster Deployment Successful!
=========================================

üìã Cluster Information:
‚Ä¢ Cluster Name: ${params.CLUSTER_NAME}
‚Ä¢ Public IP: ${outputs.instance_public_ip.value}
‚Ä¢ Instance Type: ${params.INSTANCE_TYPE}
‚Ä¢ Minikube Version: ${params.MINIKUBE_VERSION}
‚Ä¢ Kubernetes Version: ${params.KUBERNETES_VERSION}

üîë Access Information:
‚Ä¢ SSH: ${outputs.ssh_command.value}
‚Ä¢ Kubeconfig: jenkins-kubeconfig.yaml (in workspace)

üéØ Next Steps:
1. Download jenkins-kubeconfig.yaml from workspace
2. SSH to instance and run: ./cluster-health-check.sh
3. Access dashboard: ./start-dashboard.sh
4. Deploy applications using the kubeconfig

üí° Useful Commands:
‚Ä¢ Check status: ${outputs.minikube_status_command.value}
‚Ä¢ Get kubeconfig: ${outputs.kubectl_config_command.value}

üñ•Ô∏è Agent Information:
‚Ä¢ Deployed from: ${env.NODE_NAME}
‚Ä¢ Workspace: ${env.WORKSPACE}

üí∞ Remember: This cluster costs ~$0.04/hour
üî• Use DESTROY_CLUSTER=true when done to avoid charges
"""
                        }
                    } catch (Exception e) {
                        clusterInfo = """
üéâ Minikube Cluster Deployment Successful!
=========================================
‚úÖ Cluster deployed successfully
üìÑ Check workspace for cluster-access-info.txt
üí∞ Remember to destroy when done to avoid charges
"""
                    }
                    echo clusterInfo
                    
                } else if (params.DESTROY_CLUSTER) {
                    echo """
üî• Minikube Cluster Destruction Successful!
==========================================
‚úÖ All AWS resources have been destroyed
üí∞ No ongoing charges
üßπ Infrastructure cleanup completed

‚ú® Summary:
‚Ä¢ EC2 instance terminated
‚Ä¢ VPC and networking components removed
‚Ä¢ Security groups deleted
‚Ä¢ Elastic IP released
‚Ä¢ All associated resources cleaned up

üñ•Ô∏è Agent: ${env.NODE_NAME} ready for next deployment!
üí° Tools remain installed for future builds
"""
                }
            }
        }
        
        failure {
            script {
                def troubleshooting = """
‚ùå Pipeline Failed on Agent: ${env.NODE_NAME}
============================================

üîç Common Issues and Solutions:

Infrastructure Issues:
‚Ä¢ Check AWS credentials are valid and have permissions
‚Ä¢ Verify selected region has capacity for instance type
‚Ä¢ Ensure Terraform state is not locked

Agent-Specific Issues:
‚Ä¢ Verify tools are installed: terraform, aws, kubectl
‚Ä¢ Check agent has sufficient disk space
‚Ä¢ Verify agent can reach AWS APIs

Amazon Linux Specific:
‚Ä¢ Check if yum packages are up to date
‚Ä¢ Verify Docker is running: sudo systemctl status docker
‚Ä¢ Check file permissions in ${env.HOME}

Network Issues:
‚Ä¢ Check VPC and subnet configuration
‚Ä¢ Verify internet gateway is attached
‚Ä¢ Ensure route tables are configured correctly

Next Steps:
1. Check console output for specific error messages
2. SSH to agent and run: setup-jenkins-agent-amazon-linux.sh
3. Verify AWS credentials: aws sts get-caller-identity
4. Check available space: df -h

üí° For quick cleanup: Run with DESTROY_CLUSTER=true
üîß Agent troubleshooting: Check ${env.WORKSPACE} directory
"""
                echo troubleshooting
            }
        }
        
        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings on agent: ${env.NODE_NAME}"
            echo "Check logs for details and verify agent configuration."
        }
    }
}