pipeline {
    agent {
        label 'ec2-agent-1'
    }
    
    environment {
        CLUSTER_NAME = 'minikube-demo'
        TERRAFORM_VERSION = '1.12.2'
        DEPLOY_CLUSTER = "${params.DEPLOY_CLUSTER ?: 'false'}"
        DESTROY_CLUSTER = "${params.DESTROY_CLUSTER ?: 'false'}"
        MINIKUBE_VERSION = "${params.MINIKUBE_VERSION ?: 'v1.32.0'}"
        KUBERNETES_VERSION = "${params.KUBERNETES_VERSION ?: 'v1.28.3'}"
        HOME = "/home/ec2-user"
        PATH = "/usr/local/bin:/usr/bin:/bin:$PATH"
    }
    
    parameters {
        booleanParam(
            name: 'DEPLOY_CLUSTER',
            defaultValue: false,
            description: 'Deploy new Minikube cluster on AWS EC2'
        )
        booleanParam(
            name: 'DESTROY_CLUSTER',
            defaultValue: false,
            description: 'Destroy existing Minikube cluster and infrastructure'
        )
        choice(
            name: 'INSTANCE_TYPE',
            choices: ['t3.medium', 't3.large', 't3.xlarge', 't2.medium', 't2.large', 'm5.large'],
            description: 'EC2 instance type (minimum t3.medium for Minikube)'
        )
        choice(
            name: 'AWS_REGION',
            choices: ['us-west-2', 'us-east-1', 'eu-west-1', 'ap-south-1'],
            description: 'AWS region for deployment'
        )
        string(
            name: 'MINIKUBE_VERSION',
            defaultValue: 'v1.32.0',
            description: 'Minikube version to install'
        )
        string(
            name: 'KUBERNETES_VERSION',
            defaultValue: 'v1.28.3',
            description: 'Kubernetes version for Minikube cluster'
        )
        choice(
            name: 'MINIKUBE_MEMORY',
            choices: ['3900', '4096', '6144', '8192'],
            description: 'Memory allocation for Minikube (MB)'
        )
        choice(
            name: 'MINIKUBE_CPUS',
            choices: ['2', '3', '4'],
            description: 'CPU allocation for Minikube'
        )
        string(
            name: 'CLUSTER_NAME',
            defaultValue: 'minikube-demo',
            description: 'Name for the Minikube cluster'
        )
        booleanParam(
            name: 'ENABLE_DASHBOARD',
            defaultValue: true,
            description: 'Enable Kubernetes Dashboard'
        )
        booleanParam(
            name: 'ENABLE_INGRESS',
            defaultValue: true,
            description: 'Enable Ingress Controller'
        )
        booleanParam(
            name: 'ENABLE_REGISTRY',
            defaultValue: true,
            description: 'Enable Local Registry'
        )
    }
    
    stages {
        stage('Agent Info & IAM Verification') {
            steps {
                script {
                    echo "🖥️ Agent Information:"
                    echo "==================="
                    sh '''
                        echo "Agent Node: ${NODE_NAME}"
                        echo "Workspace: ${WORKSPACE}"
                        echo "OS Info: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
                        echo "User: $(whoami)"
                        echo "Home: ${HOME}"
                        echo "Working Directory: $(pwd)"
                        echo "Available Space: $(df -h . | tail -1 | awk '{print $4}')"
                        echo ""
                        echo "🔐 IAM Role Verification:"
                        echo "========================"
                        
                        if aws sts get-caller-identity; then
                            echo ""
                            echo "✅ IAM role is properly configured"
                            ROLE_ARN=$(aws sts get-caller-identity --query Arn --output text)
                            echo "Current role: $ROLE_ARN"
                            
                            echo ""
                            echo "🔍 Testing AWS permissions..."
                            aws ec2 describe-regions --query 'Regions[0].RegionName' --output text > /dev/null && echo "✅ EC2 permissions: OK"
                            aws ec2 describe-vpcs --region us-west-2 --query 'Vpcs[0].VpcId' --output text > /dev/null && echo "✅ VPC permissions: OK"
                        else
                            echo "❌ IAM role not configured or AWS CLI not working"
                            echo "Please ensure:"
                            echo "1. IAM role is attached to this EC2 instance"
                            echo "2. Role has required permissions (EC2, VPC, IAM)"
                            echo "3. AWS CLI is installed"
                            exit 1
                        fi
                    '''
                }
            }
        }
        
        stage('Validation') {
            steps {
                script {
                    echo "🔍 Validating pipeline parameters..."
                    
                    if (params.DEPLOY_CLUSTER && params.DESTROY_CLUSTER) {
                        error("❌ Cannot deploy and destroy cluster in the same run. Choose one action.")
                    }
                    
                    if (!params.DEPLOY_CLUSTER && !params.DESTROY_CLUSTER) {
                        error("❌ No action specified. Please select either DEPLOY_CLUSTER or DESTROY_CLUSTER.")
                    }
                    
                    def validInstances = ['t3.medium', 't3.large', 't3.xlarge', 't2.medium', 't2.large', 'm5.large']
                    if (!validInstances.contains(params.INSTANCE_TYPE)) {
                        error("❌ Invalid instance type. Minikube requires at least t3.medium.")
                    }
                    
                    env.AWS_REGION = params.AWS_REGION
                    env.CLUSTER_NAME = params.CLUSTER_NAME
                    env.MINIKUBE_VERSION = params.MINIKUBE_VERSION
                    env.KUBERNETES_VERSION = params.KUBERNETES_VERSION
                    
                    echo "✅ Validation completed"
                    echo "📋 Configuration:"
                    echo "   - Action: ${params.DEPLOY_CLUSTER ? 'DEPLOY' : 'DESTROY'}"
                    echo "   - Cluster Name: ${params.CLUSTER_NAME}"
                    echo "   - Region: ${params.AWS_REGION}"
                    echo "   - Instance Type: ${params.INSTANCE_TYPE}"
                    echo "   - Minikube Version: ${params.MINIKUBE_VERSION}"
                    echo "   - Kubernetes Version: ${params.KUBERNETES_VERSION}"
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo '📥 Checking out source code...'
                checkout scm
            }
        }
        
        stage('Verify Dependencies') {
            steps {
                echo '🔧 Verifying required tools on Amazon Linux agent...'
                sh '''
                    echo "Checking Amazon Linux version and package manager..."
                    
                    if [ -f /etc/os-release ]; then
                        . /etc/os-release
                        echo "OS: $PRETTY_NAME"
                        echo "Version: $VERSION_ID"
                        
                        if [[ "$VERSION_ID" == "2023" ]]; then
                            PACKAGE_MANAGER="dnf"
                            echo "Using DNF package manager for Amazon Linux 2023"
                        else
                            PACKAGE_MANAGER="yum"
                            echo "Using YUM package manager for Amazon Linux 2"
                        fi
                    else
                        PACKAGE_MANAGER="yum"
                        echo "Defaulting to YUM package manager"
                    fi
                    
                    install_tool() {
                        local tool=$1
                        local package=$2
                        
                        if command -v $tool &> /dev/null; then
                            echo "✅ $tool: Already installed"
                            return 0
                        fi
                        
                        echo "Installing $tool using $PACKAGE_MANAGER..."
                        
                        if [[ "$PACKAGE_MANAGER" == "dnf" ]]; then
                            if sudo dnf install -y --allowerasing $package; then
                                echo "✅ $tool: Installed with DNF"
                                return 0
                            fi
                        else
                            if sudo yum install -y $package; then
                                echo "✅ $tool: Installed with YUM"
                                return 0
                            fi
                            
                            echo "Retrying with --allowerasing..."
                            if sudo yum install -y --allowerasing $package; then
                                echo "✅ $tool: Installed with --allowerasing"
                                return 0
                            fi
                            
                            echo "Retrying with --skip-broken..."
                            if sudo yum install -y --skip-broken $package; then
                                echo "✅ $tool: Installed with --skip-broken"
                                return 0
                            fi
                        fi
                        
                        echo "⚠️ Could not install $tool with package manager"
                        return 1
                    }
                    
                    if [[ "$PACKAGE_MANAGER" == "dnf" ]]; then
                        sudo dnf clean all
                    else
                        sudo yum clean all
                    fi
                    
                    echo "Checking installed tools..."
                    
                    if command -v terraform &> /dev/null; then
                        CURRENT_TF_VERSION=$(terraform version | head -1 | grep -o 'v[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+')
                        echo "✅ Terraform: $CURRENT_TF_VERSION"
                        if [[ "$CURRENT_TF_VERSION" != "v${TERRAFORM_VERSION}" ]]; then
                            echo "⚠️ Different version detected. Installing Terraform ${TERRAFORM_VERSION}..."
                            cd /tmp
                            wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                            unzip -o terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                            sudo mv terraform /usr/local/bin/
                            rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                            echo "✅ Terraform ${TERRAFORM_VERSION} installed"
                        fi
                    else
                        echo "❌ Terraform not found! Installing..."
                        cd /tmp
                        wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                        unzip -o terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                        sudo mv terraform /usr/local/bin/
                        rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                        echo "✅ Terraform ${TERRAFORM_VERSION} installed"
                    fi
                    
                    if command -v aws &> /dev/null; then
                        echo "✅ AWS CLI: $(aws --version)"
                    else
                        echo "❌ AWS CLI not found! Installing..."
                        cd /tmp
                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        unzip -o awscliv2.zip
                        sudo ./aws/install --update
                        rm -rf aws awscliv2.zip
                        echo "✅ AWS CLI installed"
                    fi
                    
                    if command -v kubectl &> /dev/null; then
                        echo "✅ kubectl: $(kubectl version --client --short 2>/dev/null || echo 'kubectl installed')"
                    else
                        echo "❌ kubectl not found! Installing..."
                        cd /tmp
                        curl -LO "https://dl.k8s.io/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        sudo mv kubectl /usr/local/bin/
                        echo "✅ kubectl installed"
                    fi
                    
                    echo "Checking system tools..."
                    install_tool "jq" "jq"
                    install_tool "unzip" "unzip"
                    install_tool "wget" "wget"
                    install_tool "curl" "curl"
                    
                    if [[ "$PACKAGE_MANAGER" == "dnf" ]]; then
                        install_tool "nc" "nmap-ncat"
                    else
                        install_tool "nc" "nc"
                    fi
                    
                    echo "✅ Git: $(git --version)"
                    echo "✅ Curl: $(curl --version | head -1)"
                    
                    if command -v java &> /dev/null; then
                        echo "✅ Java: $(java -version 2>&1 | head -1)"
                    else
                        echo "ℹ️ Java not found (not required for this pipeline)"
                    fi
                    
                    echo ""
                    echo "🎯 Dependency verification completed!"
                    echo "Package Manager: $PACKAGE_MANAGER"
                    echo "All required tools are available."
                '''
            }
        }
        
        stage('Prepare Infrastructure') {
            when {
                anyOf {
                    expression { params.DEPLOY_CLUSTER == true }
                    expression { params.DESTROY_CLUSTER == true }
                }
            }
            steps {
                echo '🏗️ Preparing infrastructure configuration...'
                dir('minikube-terraform') {
                    sh '''
                        if [ ! -f ${HOME}/.ssh/id_rsa ]; then
                            echo "Generating SSH key pair..."
                            ssh-keygen -t rsa -b 4096 -f ${HOME}/.ssh/id_rsa -N ""
                        fi
                        
                        cat <<EOF > terraform.tfvars
aws_region = "${AWS_REGION}"
cluster_name = "${CLUSTER_NAME}"
environment = "demo"
instance_type = "${INSTANCE_TYPE}"
public_key = "$(cat ${HOME}/.ssh/id_rsa.pub)"
allowed_cidr_blocks = ["0.0.0.0/0"]
use_elastic_ip = true
minikube_version = "${MINIKUBE_VERSION}"
kubernetes_version = "${KUBERNETES_VERSION}"
minikube_driver = "docker"
minikube_memory = "${MINIKUBE_MEMORY}"
minikube_cpus = "${MINIKUBE_CPUS}"
enable_addons = [
EOF
                        
                        if [ "${ENABLE_DASHBOARD}" = "true" ]; then
                            echo '  "dashboard",' >> terraform.tfvars
                        fi
                        if [ "${ENABLE_INGRESS}" = "true" ]; then
                            echo '  "ingress",' >> terraform.tfvars
                        fi
                        if [ "${ENABLE_REGISTRY}" = "true" ]; then
                            echo '  "registry",' >> terraform.tfvars
                        fi
                        echo '  "metrics-server"' >> terraform.tfvars
                        echo ']' >> terraform.tfvars
                        
                        echo "✅ Terraform configuration prepared"
                        echo "📄 terraform.tfvars content:"
                        cat terraform.tfvars
                    '''
                }
            }
        }
        
        stage('Deploy Minikube Cluster') {
            when {
                expression { params.DEPLOY_CLUSTER == true }
            }
            steps {
                echo '🚀 Deploying Minikube cluster using IAM role...'
                dir('minikube-terraform') {
                    sh '''
                        echo "🔄 Initializing Terraform..."
                        terraform init
                        
                        echo "📋 Planning deployment..."
                        terraform plan -out=tfplan
                        
                        echo "🚀 Applying deployment..."
                        terraform apply -auto-approve tfplan
                        
                        echo "💾 Saving outputs..."
                        terraform output -json > terraform-outputs.json
                        
                        echo "✅ Infrastructure deployment completed!"
                        echo ""
                        echo "📊 Deployment Summary:"
                        echo "===================="
                        echo "Instance ID: $(terraform output -raw instance_id)"
                        echo "Public IP: $(terraform output -raw instance_public_ip)"
                        echo "SSH Command: $(terraform output -raw ssh_command)"
                        echo "Minikube Status: $(terraform output -raw minikube_status_command)"
                    '''
                }
            }
        }
        
        stage('Wait for Cluster Readiness') {
            when {
                expression { params.DEPLOY_CLUSTER == true }
            }
            steps {
                echo '⏳ Waiting for Minikube cluster to be ready...'
                dir('minikube-terraform') {
                    sh '''
                        INSTANCE_IP=$(terraform output -raw instance_public_ip)
                        echo "🔍 Checking instance readiness: $INSTANCE_IP"
                        
                        echo "⏳ Waiting for SSH connection..."
                        timeout 300 bash -c "until nc -z $INSTANCE_IP 22; do sleep 10; echo 'Still waiting for SSH...'; done"
                        echo "✅ SSH is available"
                        
                        echo "⏳ Waiting for Minikube setup to complete..."
                        timeout 900 bash -c "
                            while true; do
                                if ssh -i ${HOME}/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$INSTANCE_IP 'minikube status' 2>/dev/null | grep -q 'Running'; then
                                    echo '✅ Minikube is running'
                                    break
                                fi
                                echo 'Still waiting for Minikube...'
                                sleep 30
                            done
                        "
                        
                        echo "🔍 Verifying cluster functionality..."
                        ssh -i ${HOME}/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "
                            echo '=== Cluster Status ==='
                            minikube status
                            echo ''
                            echo '=== Nodes ==='
                            kubectl get nodes -o wide
                            echo ''
                            echo '=== System Pods ==='
                            kubectl get pods -n kube-system
                            echo ''
                            echo '=== Enabled Addons ==='
                            minikube addons list | grep enabled
                        "
                        
                        echo "🎉 Minikube cluster is ready!"
                    '''
                }
            }
        }
        
        stage('Configure Jenkins Access') {
            when {
                expression { params.DEPLOY_CLUSTER == true }
            }
            steps {
                echo '🔧 Configuring Jenkins access to cluster...'
                dir('minikube-terraform') {
                    sh '''
                        INSTANCE_IP=$(terraform output -raw instance_public_ip)
                        
                        echo "📥 Downloading kubeconfig from instance..."
                        ssh -i ${HOME}/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "
                            if [ ! -f jenkins-kubeconfig.yaml ]; then
                                echo 'Creating Jenkins kubeconfig...'
                                cat ~/.kube/config > jenkins-kubeconfig.yaml
                            fi
                            cat jenkins-kubeconfig.yaml
                        " > jenkins-kubeconfig.yaml
                        
                        echo "✅ Kubeconfig downloaded"
                        echo "📊 Kubeconfig size: $(wc -l < jenkins-kubeconfig.yaml) lines"
                        
                        cat <<EOF > cluster-access-info.txt
Minikube Cluster Access Information
==================================

Cluster Name: ${CLUSTER_NAME}
Public IP: $INSTANCE_IP
SSH Command: $(terraform output -raw ssh_command)

Kubeconfig Location: jenkins-kubeconfig.yaml
Dashboard Command: minikube dashboard --url

To access cluster:
1. Upload jenkins-kubeconfig.yaml to Jenkins credentials
2. SSH to instance for direct access
3. Use kubectl with the provided config

IAM Role Used: $(aws sts get-caller-identity --query Arn --output text)
Setup completed at: $(date)
EOF
                        
                        echo "📄 Cluster access information saved"
                    '''
                }
            }
        }
        
        stage('Cluster Health Check') {
            when {
                expression { params.DEPLOY_CLUSTER == true }
            }
            steps {
                echo '🏥 Performing cluster health check...'
                dir('minikube-terraform') {
                    sh '''
                        INSTANCE_IP=$(terraform output -raw instance_public_ip)
                        
                        ssh -i ${HOME}/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "
                            echo '🏥 Comprehensive Cluster Health Check'
                            echo '====================================='
                            echo ''
                            
                            echo '📊 Minikube Status:'
                            minikube status
                            echo ''
                            
                            echo '🖥️ Node Information:'
                            kubectl get nodes -o wide
                            echo ''
                            
                            echo '📦 System Pods Status:'
                            kubectl get pods -n kube-system
                            echo ''
                            
                            echo '🔧 Enabled Addons:'
                            minikube addons list | grep enabled
                            echo ''
                            
                            echo '🌐 Services:'
                            kubectl get svc --all-namespaces
                            echo ''
                            
                            echo '💾 Storage Classes:'
                            kubectl get storageclass
                            echo ''
                            
                            echo '🔒 RBAC Check:'
                            kubectl get clusterrolebinding jenkins-deployer || echo 'Jenkins RBAC not found'
                            echo ''
                            
                            echo '🎯 Test Pod Deployment:'
                            kubectl run test-nginx --image=nginx:latest --port=80 --dry-run=client -o yaml | kubectl apply -f -
                            sleep 5
                            kubectl get pod test-nginx
                            kubectl delete pod test-nginx --force --grace-period=0
                            echo ''
                            
                            echo '✅ Health check completed successfully!'
                        "
                    '''
                }
            }
        }
        
        stage('Destroy Cluster') {
            when {
                expression { params.DESTROY_CLUSTER == true }
            }
            steps {
                echo '🔥 Destroying Minikube cluster and infrastructure using IAM role...'
                dir('minikube-terraform') {
                    sh '''
                        echo "🔄 Initializing Terraform..."
                        terraform init
                        
                        echo "📋 Planning destruction..."
                        terraform plan -destroy
                        
                        echo "🔥 Destroying infrastructure..."
                        terraform destroy -auto-approve
                        
                        echo "🧹 Cleaning up files..."
                        rm -f terraform.tfvars tfplan terraform-outputs.json jenkins-kubeconfig.yaml cluster-access-info.txt
                        
                        echo "✅ Infrastructure destroyed successfully!"
                        echo "💰 All AWS resources have been cleaned up"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo '🧹 Cleaning up workspace...'
            sh '''
                rm -f minikube-terraform/temp-* || true
                echo "Tools preserved on agent for future builds"
            '''
        }
        
        success {
            script {
                if (params.DEPLOY_CLUSTER) {
                    try {
                        dir('minikube-terraform') {
                            def outputs = readJSON file: 'terraform-outputs.json'
                            echo """
🎉 Minikube Cluster Deployment Successful!
=========================================

📋 Cluster Information:
• Cluster Name: ${params.CLUSTER_NAME}
• Public IP: ${outputs.instance_public_ip.value}
• Instance Type: ${params.INSTANCE_TYPE}
• Minikube Version: ${params.MINIKUBE_VERSION}
• Kubernetes Version: ${params.KUBERNETES_VERSION}

🔑 Access Information:
• SSH: ${outputs.ssh_command.value}
• Kubeconfig: jenkins-kubeconfig.yaml (in workspace)

🔐 Security:
• IAM Role: Used for secure deployment
• No hardcoded credentials
• Follows AWS security best practices

🎯 Next Steps:
1. Download jenkins-kubeconfig.yaml from workspace
2. SSH to instance and run: ./cluster-health-check.sh
3. Access dashboard: ./start-dashboard.sh
4. Deploy applications using the kubeconfig

💡 Useful Commands:
• Check status: ${outputs.minikube_status_command.value}
• Get kubeconfig: ${outputs.kubectl_config_command.value}

🖥️ Agent Information:
• Deployed from: ${env.NODE_NAME}
• Workspace: ${env.WORKSPACE}
• IAM Role: Used securely without credentials

💰 Remember: This cluster costs approximately 0.04 USD per hour
🔥 Use DESTROY_CLUSTER=true when done to avoid charges
"""
                        }
                    } catch (Exception e) {
                        echo """
🎉 Minikube Cluster Deployment Successful!
=========================================
✅ Cluster deployed successfully using IAM role
📄 Check workspace for cluster-access-info.txt
🔐 Deployed securely without hardcoded credentials
💰 Remember to destroy when done to avoid charges
"""
                    }
                    
                } else if (params.DESTROY_CLUSTER) {
                    echo """
🔥 Minikube Cluster Destruction Successful!
==========================================
✅ All AWS resources have been destroyed
💰 No ongoing charges
🧹 Infrastructure cleanup completed

✨ Summary:
• EC2 instance terminated
• VPC and networking components removed
• Security groups deleted
• Elastic IP released
• All associated resources cleaned up

🔐 Security:
• Destruction performed using IAM role
• No credentials exposed or stored
• Secure cleanup process

🖥️ Agent: ${env.NODE_NAME} ready for next deployment!
💡 Tools remain installed for future builds
"""
                }
            }
        }
        
        failure {
            echo """
❌ Pipeline Failed on Agent: ${env.NODE_NAME}
============================================

🔍 Common Issues and Solutions:

IAM Role Issues:
• Verify IAM role is attached to Jenkins agent EC2 instance
• Check role has required permissions (EC2, VPC, IAM)
• Test: aws sts get-caller-identity
• Ensure role can pass roles to other EC2 instances

Infrastructure Issues:
• Verify selected region has capacity for instance type
• Check if VPC limits have been reached
• Ensure Terraform state is not locked

Agent-Specific Issues:
• Verify tools are installed: terraform, aws, kubectl
• Check agent has sufficient disk space
• Verify agent can reach AWS APIs

Amazon Linux Specific:
• Check if dnf/yum packages are up to date
• Verify Docker is running: sudo systemctl status docker
• Check file permissions in home directory

Network Issues:
• Check VPC and subnet configuration
• Verify internet gateway is attached
• Ensure route tables are configured correctly

Next Steps:
1. Check console output for specific error messages
2. Verify IAM role permissions and attachment
3. Test AWS CLI: aws ec2 describe-instances --region us-west-2
4. Check available space: df -h

💡 For quick cleanup: Run with DESTROY_CLUSTER=true
🔧 Agent troubleshooting: Check workspace directory
🔐 IAM troubleshooting: Verify role attachment and permissions
"""
        }
        
        unstable {
            echo "⚠️ Pipeline completed with warnings on agent: ${env.NODE_NAME}"
            echo "Check logs for details and verify agent configuration."
        }
    }
}